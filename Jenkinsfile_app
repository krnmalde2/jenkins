def gv

pipeline {
    tools {
    maven 'Maven'
}
    agent any
    stages {
        stage("init") {
            steps {
                script {

                    gv = load "script2.groovy"
                }
            }
        }

         stage('increment version'){  
         steps {  
            script{  
               echo 'incrementing app version'  
               sh 'mvn build-helper:parse-version versions:set \
               -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion}'
               def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'  
               def version = matcher[0][1]  
                echo "version is $version"  
               env.IMAGE_NAME = "$version-$BUILD_NUMBER"  
            }  
         }  
      }  

            stage('commit version update'){  
           steps{  
              script{  
                  withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-key', keyFileVariable: 'keyfile')]){ 
                 // set some Git configuration, we can also set this in the Jenkins server  
                          sh 'git config --global user.email "jenkins@example.com"'  
                          sh 'git config --global user.name "jenkins"'  

                          sh 'git status'  
                          sh 'git branch'  
                          sh 'git config --list'  

                          //sh "git remote set-url origin git@github.com/krnmalde2/jenkins.git"  
//                            
                          sh "git remote set-url origin git@github.com:krnmalde2/jenkins.git"  
//                            sh "git push -u origin jenkins-jobs"  
                          sh 'git add .'  
                          sh "git remote -v"  
                          sh 'git commit -m "ci: version bump"'  

                                sh 'GIT_SSH_COMMAND="ssh -i $keyfile"'  
                          sh 'git push origin HEAD:master' //need to specify the branch name her' //need to specify the branch name here. Because  
                       }  
              }  
           }  
        }  
        stage("build jar") {
            steps {
                script {

                    // echo "building jar"
                    //  sh 'mvn build-helper:parse-version versions:set -DnewVersion=\\\${parsedVersion.nextMajorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.incrementalVersion} versions:commit'  
                    //  def match = readFile('pom.xml')=~'<version>(.+)<version>'
                    //  def version= match[0][1]
                    // echo "new version is $version"
                    // env.IMAGE_NAME = "$version-$BUILD_NUMBER"
                    gv.buildjar()
                }
            }
        }
        // stage("build image") {
        //     steps {
        //         script {
        //             echo "building image"
        //             gv.buildImage()
        //         }
        //     }
        // }
        stage("deploy") {
            steps {
                script {
                    echo "deploying"
                    withCredentials([usernamePassword(
                      credentialsId:'dockerhub repo',
                      usernameVariable:'USER',
                      passwordVariable:'PASS'
    )])
    {
                    sh "docker build -t krnmalde/jenkins:${IMAGE_NAME} ."
                    sh "echo $PASS | docker login -u $USER --password-stdin"

    
                    echo "deploy application successfully deployed"
                    sh "docker push krnmalde/jenkins:${IMAGE_NAME}"

    }
                }
            }
        }
    }   
}
